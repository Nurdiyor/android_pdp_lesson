// Generated by Dagger (https://dagger.dev).
package uz.micro.star.lesson_41.di.component;

import android.app.Application;
import androidx.lifecycle.ViewModel;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import uz.micro.star.lesson_41.MainActivity;
import uz.micro.star.lesson_41.app.App;
import uz.micro.star.lesson_41.di.module.ActivityBuildersModule_ContributeMainActivity;
import uz.micro.star.lesson_41.di.module.AppModule_ProvideSharedFactory;
import uz.micro.star.lesson_41.di.module.MainFragmentBuildersModule_SplashFragment;
import uz.micro.star.lesson_41.di.module.MainFragmentBuildersModule_WeatherFragment;
import uz.micro.star.lesson_41.di.module.NetworkModule_ProvideHttpLoggingInterceptorFactory;
import uz.micro.star.lesson_41.di.module.NetworkModule_ProvideLoginFactory;
import uz.micro.star.lesson_41.di.module.NetworkModule_ProvideRetrofitFactory;
import uz.micro.star.lesson_41.fragments.BaseFragment_MembersInjector;
import uz.micro.star.lesson_41.fragments.SplashFragment;
import uz.micro.star.lesson_41.fragments.WeatherFragment;
import uz.micro.star.lesson_41.repository.ActivityRepository;
import uz.micro.star.lesson_41.repository.ActivityRepository_Factory;
import uz.micro.star.lesson_41.retrofit.ApiService;
import uz.micro.star.lesson_41.utils.SharedPref;
import uz.micro.star.lesson_41.viewmodels.ActivityViewModel;
import uz.micro.star.lesson_41.viewmodels.ActivityViewModel_Factory;
import uz.micro.star.lesson_41.viewmodels.DaggerViewModelFactory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<HttpLoggingInterceptor> provideHttpLoggingInterceptorProvider;

  private Provider<Application> applicationProvider;

  private Provider<SharedPref> provideSharedProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiService> provideLoginProvider;

  private DaggerAppComponent(Application applicationParam) {

    initialize(applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);
  }

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();
      }
    };
    this.provideHttpLoggingInterceptorProvider = DoubleCheck.provider(NetworkModule_ProvideHttpLoggingInterceptorFactory.create());
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideSharedProvider = DoubleCheck.provider(AppModule_ProvideSharedFactory.create(applicationProvider));
    this.provideRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(provideHttpLoggingInterceptorProvider, provideSharedProvider));
    this.provideLoginProvider = DoubleCheck.provider(NetworkModule_ProvideLoginFactory.create(provideRetrofitProvider));
  }

  @Override
  public void inject(App arg0) {
    injectApp(arg0);
  }

  private App injectApp(App instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<MainFragmentBuildersModule_SplashFragment.SplashFragmentSubcomponent.Factory> splashFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuildersModule_WeatherFragment.WeatherFragmentSubcomponent.Factory> weatherFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(SplashFragment.class, (Provider) splashFragmentSubcomponentFactoryProvider).put(WeatherFragment.class, (Provider) weatherFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.splashFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuildersModule_SplashFragment.SplashFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuildersModule_SplashFragment.SplashFragmentSubcomponent.Factory get() {
          return new SplashFragmentSubcomponentFactory();
        }
      };
      this.weatherFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuildersModule_WeatherFragment.WeatherFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuildersModule_WeatherFragment.WeatherFragmentSubcomponent.Factory get(
            ) {
          return new WeatherFragmentSubcomponentFactory();
        }
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      return instance;
    }

    private final class SplashFragmentSubcomponentFactory implements MainFragmentBuildersModule_SplashFragment.SplashFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuildersModule_SplashFragment.SplashFragmentSubcomponent create(
          SplashFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SplashFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SplashFragmentSubcomponentImpl implements MainFragmentBuildersModule_SplashFragment.SplashFragmentSubcomponent {
      private Provider<ActivityRepository> activityRepositoryProvider;

      private Provider<ActivityViewModel> activityViewModelProvider;

      private SplashFragmentSubcomponentImpl(SplashFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(ActivityViewModel.class, (Provider) activityViewModelProvider);
      }

      private DaggerViewModelFactory getDaggerViewModelFactory() {
        return new DaggerViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final SplashFragment arg0) {
        this.activityRepositoryProvider = ActivityRepository_Factory.create(DaggerAppComponent.this.provideLoginProvider, DaggerAppComponent.this.provideSharedProvider);
        this.activityViewModelProvider = ActivityViewModel_Factory.create(activityRepositoryProvider, DaggerAppComponent.this.provideSharedProvider);
      }

      @Override
      public void inject(SplashFragment arg0) {
        injectSplashFragment(arg0);
      }

      private SplashFragment injectSplashFragment(SplashFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BaseFragment_MembersInjector.injectProviderFactory(instance, getDaggerViewModelFactory());
        return instance;
      }
    }

    private final class WeatherFragmentSubcomponentFactory implements MainFragmentBuildersModule_WeatherFragment.WeatherFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuildersModule_WeatherFragment.WeatherFragmentSubcomponent create(
          WeatherFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WeatherFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WeatherFragmentSubcomponentImpl implements MainFragmentBuildersModule_WeatherFragment.WeatherFragmentSubcomponent {
      private Provider<ActivityRepository> activityRepositoryProvider;

      private Provider<ActivityViewModel> activityViewModelProvider;

      private WeatherFragmentSubcomponentImpl(WeatherFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(ActivityViewModel.class, (Provider) activityViewModelProvider);
      }

      private DaggerViewModelFactory getDaggerViewModelFactory() {
        return new DaggerViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final WeatherFragment arg0) {
        this.activityRepositoryProvider = ActivityRepository_Factory.create(DaggerAppComponent.this.provideLoginProvider, DaggerAppComponent.this.provideSharedProvider);
        this.activityViewModelProvider = ActivityViewModel_Factory.create(activityRepositoryProvider, DaggerAppComponent.this.provideSharedProvider);
      }

      @Override
      public void inject(WeatherFragment arg0) {
        injectWeatherFragment(arg0);
      }

      private WeatherFragment injectWeatherFragment(WeatherFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BaseFragment_MembersInjector.injectProviderFactory(instance, getDaggerViewModelFactory());
        return instance;
      }
    }
  }
}
