// Generated by Dagger (https://dagger.dev).
package uz.micro.star.lesson_41.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import uz.micro.star.lesson_41.utils.SharedPref;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  private final Provider<SharedPref> sharedProvider;

  public NetworkModule_ProvideRetrofitFactory(
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<SharedPref> sharedProvider) {
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
    this.sharedProvider = sharedProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(httpLoggingInterceptorProvider.get(), sharedProvider.get());
  }

  public static NetworkModule_ProvideRetrofitFactory create(
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<SharedPref> sharedProvider) {
    return new NetworkModule_ProvideRetrofitFactory(httpLoggingInterceptorProvider, sharedProvider);
  }

  public static Retrofit provideRetrofit(HttpLoggingInterceptor httpLoggingInterceptor,
      SharedPref shared) {
    return Preconditions.checkNotNull(NetworkModule.INSTANCE.provideRetrofit(httpLoggingInterceptor, shared), "Cannot return null from a non-@Nullable @Provides method");
  }
}
